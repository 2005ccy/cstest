{"version":3,"sources":["../../../src/common/route/proxy.js"],"names":["Proxy","app","divide","methods","serMap","appMap","init","proxyPublish","get","req","res","json","ok","mongo","find","toArray","sers","console","info","_","isEmpty","filter","ser","method","url","status","groupBy","path","serverList","proxyServer","each","v","k","isUndefined","sa","split","lowerCase","includes","next","serList","now","length","cur","target","changeOrigin","code","msg","Base"],"mappings":"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","file":"proxy.js","sourcesContent":["// TODO 路由转发\nimport proxy from 'http-proxy-middleware';\n// 导入mongo请求对象\nimport Mongo from '../../mongo/mongo.js';\n\n// 代理器对象\nexport default class Proxy extends Base {\n\n    // 字符串分隔符\n    divide = '...';\n    // 方法数组\n    methods =['all', 'get', 'post', 'put', 'delete'];\n    // 配置的服务Map\n    serMap = {};\n    // app 发布map\n    appMap = {};\n\n    // 代理器构造方法\n    constructor(app) {\n        super();\n        this.app = app;\n        this.init();\n    }\n\n    // 初始化方法\n    init() {\n        // 发布代理服务\n        this.proxyPublish();\n        this.app.get('/proxy/refresh', (req, res) => {\n            this.proxyPublish();\n            res.json({\n                ok: true\n            });\n        })\n    }\n\n    // 查询服务器列表数据\n    async serverList() {\n        let mongo = await new Mongo('server');\n        this.sers = await mongo.find().toArray();\n    }\n\n    // 整理代理数据\n    proxyServer() {\n        console.info('this.sers: ', this.sers);\n        // 如果存在服务数据\n        if (!_.isEmpty(this.sers)) {\n            // 只获取，正常状态的服务\n            this.sers = _.filter(this.sers, (ser) => {\n                return ser.method && ser.url && ser.status === 'normal';\n            });\n            // 根据路由规则，对服务器进行分组\n            this.serMap = _.groupBy(this.sers, (ser) => {\n                return `${ser.method}${this.divide}${ser.path}`;\n            });\n        }\n    }\n\n    // 代理发布服务\n    async proxyPublish() {\n        // 获取服务器列表\n        await this.serverList();\n        // 对服务器列表进行数据转换\n        this.proxyServer();\n        // 遍历代理服务器\n        _.each(this.serMap, (v, k) => {\n            // 如果没有发布当前路由的，中间件\n            if (_.isUndefined(this.appMap[k])) {\n                // 分解请求字符串\n                let sa = k.split(this.divide);\n                // 获取请求方法\n                let method = _.lowerCase(sa[0] || 'all');\n                // 排除非法方法\n                if (!_.includes(this.methods, method)) {\n                    method = 'all';\n                }\n                // 获取请求路径\n                let path = sa[1];\n                // 发布路由中间件\n                this.app[method](path, (req, res, next) => {\n                    // 获取当前路由列表\n                    let serList = this.serMap[k] || [];\n                    // 获取请求计数\n                    let now = this.appMap[k] + 1;\n                    // 如果大于数组长度\n                    if (now >= serList.length) {\n                        // 从第一个开始\n                        now = 0;\n                    }\n                    // 设置当前服务索引\n                    this.appMap[k] = now;\n                    // 获取当前服务\n                    let cur = serList[now];\n                    // 如果服务存在\n                    if (cur) {\n                        // 发起代理请求\n                        proxy({\n                            target: cur.url,\n                            changeOrigin: true\n                        })(req, res, next);\n                    } else {\n                        // TODO 发出短信报错\n\n                        // 发出服务部存在，错误信息\n                        res.json({\n                            ok: false,\n                            code: 'SERVER_NOT_EXISTS',\n                            msg: '服务不存在'\n                        })\n                    }\n                });\n                // 设置服务请求索引\n                this.appMap[k] = 0;\n            }\n        });\n    }\n}"]}