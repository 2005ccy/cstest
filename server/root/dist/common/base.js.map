{"version":3,"sources":["../../src/common/base.js"],"names":["Base","finally","finallyTO","clearTimeout","setTimeout","methods","forEach","method","ret","setFinallyTimeout","e","console","error","bind","Object","getOwnPropertyNames","constructor","prototype","filter","prop","res","data","json","ok","global"],"mappings":";;;;;;AACA;IACMA,I;;AAEF;AACA,oBAAc;AAAA;AAGb;AAFG;AACA;;;AAGJ;;;;;4CACoB;AAChB,gBAAI,KAAKC,OAAT,EAAkB;AACd,qBAAKC,SAAL,IAAkBC,aAAa,KAAKD,SAAlB,CAAlB;AACA,qBAAKA,SAAL,GAAiBE,WAAW,KAAKH,OAAhB,EAAyB,CAAzB,CAAjB;AACH;AACJ;;AAED;;;;6BACKI,O,EAAS;AAAA;;AACV;AACAA,oBAAQC,OAAR,CAAgB,kBAAU;;AAEtB;AACA,4BAASC,MAAT,IAAqB,MAAKA,MAAL,CAArB;AACA;AACA,sBAAKA,MAAL,IAAe,YAAc;AACzB;AACA,wBAAIC,YAAJ;AACA;AACA,wBAAI;;AAEA;AACAA,8BAAM,YAASD,MAAT,yBAAN;AACA;AACA,8BAAKE,iBAAL;AACH,qBAND,CAME,OAAQC,CAAR,EAAY;AACV;AACAC,gCAAQC,KAAR,CAAcF,CAAd;AACH;AACD,2BAAOF,GAAP;AACH,iBAfD;AAgBH,aArBD;AAsBH;;AAED;;;;mCACW;AAAA;;AACP,iBAAKK,IAAL,CACIC,OAAOC,mBAAP,CAA2B,KAAKC,WAAL,CAAiBC,SAA5C,EACKC,MADL,CACY;AAAA,uBAAQ,OAAO,OAAKC,IAAL,CAAP,KAAsB,UAA9B;AAAA,aADZ,CADJ;AAIH;;AAED;;;;iCACSC,G,EAAKC,I,EAAM;AAChB,gBAAID,GAAJ,EAAS;AACLA,oBAAIE,IAAJ,CAAS;AACLC,wBAAIF,OAAO,IAAP,GAAc,KADb;AAELA,0BAAMA;AAFD,iBAAT;AAIH;AACJ;;;;;AAEL;;;AACAG,OAAOxB,IAAP,GAAcA,IAAd","file":"base.js","sourcesContent":["﻿\n// 定义方法基类\nclass Base {\n\n    // 基类构造方法\n    constructor() {\n        // 绑定组件所有的方法\n        // this.autoBind();\n    }\n\n    // 超时执行\n    setFinallyTimeout() {\n        if (this.finally) {\n            this.finallyTO && clearTimeout(this.finallyTO);\n            this.finallyTO = setTimeout(this.finally, 1);\n        }\n    }\n\n    // 绑定方法数组 ==OK==\n    bind(methods) {\n        // 遍历对象现有方法\n        methods.forEach(method => {\n\n            // 重命名旧函数\n            this[`_${method}`] = this[method];\n            // 重写对象方法\n            this[method] = (...param) => {\n                // 定义返回值\n                let ret;\n                // 执行带捕获的方法\n                try {\n\n                    // 执行旧方法体\n                    ret = this[`_${method}`](...param);\n                    // 设置完成超时执行\n                    this.setFinallyTimeout();\n                } catch ( e ) {\n                    // 记录日志信息\n                    console.error(e);\n                }\n                return ret;\n            };\n        });\n    }\n\n    // 执行类的所有方法绑定 ==OK==\n    autoBind() {\n        this.bind(\n            Object.getOwnPropertyNames(this.constructor.prototype)\n                .filter(prop => typeof this[prop] === 'function')\n        );\n    }\n\n    // 响应输出\n    response(res, data) {\n        if (res) {\n            res.json({\n                ok: data ? true : false,\n                data: data\n            })\n        }\n    }\n}\n// 全局基类\nglobal.Base = Base;"]}