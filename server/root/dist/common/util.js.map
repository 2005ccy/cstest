{"version":3,"sources":["../../src/common/util.js"],"names":["_","require","pathToRegexp","global","Object","assign","regex","mobile","getObjectByFields","obj","fieldArr","ret","k","v","includes","getObjectNotFields","pathMatch","regStr","path","split","re","ra","exec","isEmpty","pathMatchArr","regStrArr","isArray","i","uuid","d","Date","getTime","replace","c","r","Math","random","floor","toString"],"mappings":";;AAAA,IAAMA,IAAIC,QAAQ,QAAR,CAAV;AACA;AACA,IAAMC,eAAeD,QAAQ,gBAAR,CAArB;;AAEA;AACAE,OAAOH,CAAP,GAAWI,OAAOC,MAAP,CAAcL,CAAd,EAAiB;AACxB;AACAM,WAAO;AACH;AACAC,gBAAQ;AAFL,KAFiB;AAMxB;AACAC,uBAAmB,2BAACC,GAAD,EAAMC,QAAN,EAAmB;AAClC,YAAIC,MAAM,EAAV;AACA,aAAK,IAAIC,CAAT,IAAcH,GAAd,EAAmB;AACf,gBAAII,IAAIJ,IAAIG,CAAJ,CAAR;AACA,gBAAIF,SAASI,QAAT,CAAkBF,CAAlB,CAAJ,EAA0B;AACtBD,oBAAIC,CAAJ,IAASC,CAAT;AACH;AACJ;AACD,eAAOF,GAAP;AACH,KAhBuB;AAiBxB;AACAI,wBAAoB,4BAACN,GAAD,EAAMC,QAAN,EAAmB;AACnC,YAAIC,MAAM,EAAV;AACA,aAAK,IAAIC,CAAT,IAAcH,GAAd,EAAmB;AACf,gBAAII,IAAIJ,IAAIG,CAAJ,CAAR;AACA,gBAAI,CAACF,SAASI,QAAT,CAAkBF,CAAlB,CAAL,EAA2B;AACvBD,oBAAIC,CAAJ,IAASC,CAAT;AACH;AACJ;AACD,eAAOF,GAAP;AACH,KA3BuB;AA4BxB;AACAK,eAAW,mBAACC,MAAD,EAASC,IAAT,EAAkB;AACzB;AACA,YAAI,CAACD,MAAD,IAAW,CAACC,IAAhB,EAAsB;AAClB,mBAAO,KAAP;AACH;AACD;AACAA,eAAOA,KAAKC,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAP;AACA;AACA,YAAIF,UAAUC,IAAd,EAAoB;AAChB;AACA,mBAAO,IAAP;AACH;AACD;AACA,YAAIE,KAAKlB,aAAae,MAAb,EAAqB,EAArB,CAAT;AACA;AACA,YAAII,KAAKD,GAAGE,IAAH,CAAQJ,IAAR,CAAT;AACA;AACA,YAAI,CAAClB,EAAEuB,OAAF,CAAUF,EAAV,CAAL,EAAoB;AAChB;AACA,mBAAO,IAAP;AACH;AACD;AACA,eAAO,KAAP;AACH,KApDuB;AAqDxB;AACAG,kBAAc,sBAACC,SAAD,EAAYP,IAAZ,EAAqB;AAC/B;AACA,YAAI,CAAClB,EAAE0B,OAAF,CAAUD,SAAV,CAAD,IAAyB,CAACP,IAA9B,EAAoC;AAChC,mBAAO,KAAP;AACH;AACD;AACA,aAAK,IAAIS,CAAT,IAAcF,SAAd,EAAyB;AACrB;AACA,gBAAIR,SAASQ,UAAUE,CAAV,CAAb;AACA;AACA,gBAAI3B,EAAEgB,SAAF,CAAYC,MAAZ,EAAoBC,IAApB,CAAJ,EAA+B;AAC3B;AACA,uBAAO,IAAP;AACH;AACJ;AACD;AACA,eAAO,KAAP;AACH,KAvEuB;AAwExB;AACAU,UAAM,gBAAM;AACR,YAAIC,IAAI,IAAIC,IAAJ,GAAWC,OAAX,EAAR;AACA,YAAIH,OAAO,uCAAuCI,OAAvC,CAA+C,OAA/C,EAAwD,UAASC,CAAT,EAAY;AAC3E,gBAAIC,IAAI,CAACL,IAAIM,KAAKC,MAAL,KAAgB,EAArB,IAA2B,EAA3B,GAAgC,CAAxC;AACAP,gBAAIM,KAAKE,KAAL,CAAWR,IAAI,EAAf,CAAJ;AACA,mBAAO,CAACI,KAAK,GAAL,GAAWC,CAAX,GAAgBA,IAAI,GAAJ,GAAU,GAA3B,EAAiCI,QAAjC,CAA0C,EAA1C,CAAP;AACH,SAJU,CAAX;AAKA,eAAOV,IAAP;AACH;;AAjFuB,CAAjB,CAAX","file":"util.js","sourcesContent":["const _ = require('lodash');\n// 导入正则解析path组件\nconst pathToRegexp = require('path-to-regexp');\n\n// 扩展全局 _ 对象\nglobal._ = Object.assign(_, {\n    // 正则表达式\n    regex: {\n        // 手机正则\n        mobile: /^(0|86|17951)?(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]{8}$/\n    },\n    // 获取指定字段对象\n    getObjectByFields: (obj, fieldArr) => {\n        let ret = {};\n        for (let k in obj) {\n            let v = obj[k];\n            if (fieldArr.includes(k)) {\n                ret[k] = v;\n            }\n        }\n        return ret;\n    },\n    // 获取排除字段对象\n    getObjectNotFields: (obj, fieldArr) => {\n        let ret = {};\n        for (let k in obj) {\n            let v = obj[k];\n            if (!fieldArr.includes(k)) {\n                ret[k] = v;\n            }\n        }\n        return ret;\n    },\n    // 路径匹配\n    pathMatch: (regStr, path) => {\n        // 参数无效，匹配失败\n        if (!regStr || !path) {\n            return false;\n        }\n        // 去除参数\n        path = path.split('?')[0];\n        // 如果字符串相等\n        if (regStr == path) {\n            // 匹配成功\n            return true;\n        }\n        // 构建正则对象\n        let re = pathToRegexp(regStr, []);\n        // 匹配path\n        let ra = re.exec(path);\n        // 如果有匹配结果\n        if (!_.isEmpty(ra)) {\n            // 匹配成功\n            return true;\n        }\n        // 匹配失败\n        return false;\n    },\n    // 匹配一组规则，一个成功，则全部成功\n    pathMatchArr: (regStrArr, path) => {\n        // 参数无效匹配失败\n        if (!_.isArray(regStrArr) || !path) {\n            return false;\n        }\n        // 遍历路径数组\n        for (let i in regStrArr) {\n            // 获取当个路径\n            let regStr = regStrArr[i];\n            // 匹配路径\n            if (_.pathMatch(regStr, path)) {\n                // 匹配成功\n                return true;\n            }\n        }\n        // 匹配失败\n        return false;\n    },\n    // 生成uuid字符串 ==OK==\n    uuid: () => {\n        var d = new Date().getTime();\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = (d + Math.random() * 16) % 16 | 0;\n            d = Math.floor(d / 16);\n            return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n        });\n        return uuid;\n    },\n\n});\n"]}