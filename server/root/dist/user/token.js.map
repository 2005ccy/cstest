{"version":3,"sources":["../../src/user/token.js"],"names":["Token","loginSecret","init","use","token","cb","tobj","restoreToken","verify","tokenSecret","timestamp","algorithms","err","decoded","decode","expired","ts","newToken","i","t","length","t2","_","endsWith","substring","device","user","_this","userId","_id","deviceId","now","Math","floor","Date","browser","data","roles","exp","sign","algorithm","changeToken","req","res","next","authenticate","session","Base"],"mappings":"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","file":"token.js","sourcesContent":["// 登录验证组件\nimport passport from 'passport';\n// http参数验证组件\nimport { Strategy } from 'passport-http-bearer';\n// 加密解密组件\nimport jwt from 'jsonwebtoken';\n\n// 构建请求token字符串\nexport default class Token extends Base {\n\n    // 构建串秘钥\n    loginSecret = 'secret';\n\n    // 构造方法\n    constructor() {\n        super();\n        this.init();\n    }\n\n    // 类的初始化方法\n    init() {\n        // 使用策略设置，用户信息\n        passport.use(new Strategy(function(token, cb) {\n\n            // 转义token\n            let tobj = this.restoreToken(token);\n\n            jwt.verify(tobj.token, this.tokenSecret(tobj.timestamp), {\n                algorithms: ['HS256']\n            }, function(err, decoded) {\n                if (err) {\n                    // token 过期、或是签名错误等、尝试获取数据\n                    decoded = jwt.decode(tobj.token) || {};\n                    // 登录过期\n                    decoded.expired = true;\n                // 验证错误\n                // return cb(err);\n                }\n                // 输出用户信息\n                cb(null, decoded);\n            });\n        }));\n    }\n\n    // 构建 access_token 构建秘钥\n    tokenSecret(timestamp) {\n        return `${timestamp}.${this.loginSecret}`;\n    }\n\n    // 转换token\n    changeToken(timestamp, token) {\n        let ts = `${timestamp}.`;\n        let newToken = '';\n        for (let i in token) {\n            newToken += token[i];\n            if (ts[i]) {\n                newToken += ts[i];\n            }\n        }\n        return newToken;\n    }\n\n    // 分离token中 token、timestamp\n    restoreToken(token) {\n        let ts = '';\n        let t = '';\n        for (let i = 0; i < token.length; i = i + 2) {\n            let t2 = token[i + 1] || '';\n\n            t += token[i];\n            if (!_.endsWith(ts, '.')) {\n                ts += t2;\n            } else {\n                t += t2;\n            }\n        }\n        // 返回结果\n        return {\n            timestamp: ts && ts.substring(0, ts.length - 1),\n            token: t\n        };\n    }\n\n    // 构建更完善token\n    buildToken(device, user) {\n        let _this = this;\n        // 构建token 数据\n        let userId = user._id;\n        let deviceId = device._id;\n        let now = Math.floor(Date.now() / 1000);\n        now += device.browser ? 60 * 60 : 60 * 60 * 24 * 365;\n        let data = {\n            userId: userId,\n            deviceId: deviceId,\n            roles: user.roles,\n            exp: now\n        };\n        // 构建时的毫秒数\n        let timestamp = _.now();\n        // 根据数据，生成token数据\n        let t = jwt.sign(data, this.tokenSecret(timestamp), {\n            algorithm: 'HS256'\n        });\n        return this.changeToken(timestamp, t);\n    }\n\n    // 构建用户信息拦截中间件\n    authenticate(req, res, next) {\n        // 进行用户验证\n        passport.authenticate('bearer', {\n            session: false\n        })(req, res, next);\n    }\n}"]}