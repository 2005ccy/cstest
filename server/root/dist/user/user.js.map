{"version":3,"sources":["../../src/user/user.js"],"names":["token","User","pwdSecret","device","Mongo","mongo","insert","guest","req","res","body","_id","_","now","user","roles","devices","address","ret","saveDevice","saveGuest","buildToken","response","checkCaptcha","captcha","json","ok","code","msg","ts","data","extend","timestamp","mobile","email","password","crypto","agreement","confirm","pwd","toString","reg","RegExp","c","params","r","status","opt","size","ignoreChars","noise","create","send","access_token","logout","redirect","Base"],"mappings":"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","file":"user.js","sourcesContent":["\n// 生成加密字符串\nimport SHA256 from \"crypto-js/sha256\";\n// svg 验证码\nimport svgCaptcha from 'svg-captcha';\n// 加载accessToken组件\nimport Token from './token.js';\n\nconst token = new Token();\n\n// 用户相关操作类\nexport default class User extends Base {\n\n    // 密码加密密钥\n    pwdSecret = 'pwd.timestamp.sha256'\n\n    // 构造方法\n    constructor() {\n        super();\n    }\n\n    // 创建设备数据\n    async saveDevice(device) {\n        // 构建mongo实例\n        let mongo = await new Mongo('device');\n        // 向数据库插入数据\n        return await mongo.insert(device);\n    }\n\n    // 创建访客用户\n    async saveGuest(guest) {\n        // 构建mongo实例\n        let mongo = await new Mongo('guest');\n        // 向数据库插入数据\n        return await mongo.insert(guest);\n    }\n\n    // 生成游客accessToken\n    guestAccessToken(req, res) {\n\n        // 获得设备信息\n        let device = req.body;\n        // 设置设备唯一编号\n        device._id = `${_.now()}.system.device`;\n\n        // 构建用户数据\n        let user = {\n            _id: `${_.now()}.system.guest`,\n            roles: ['guest'],\n            devices: [device._id],\n            address: device.address\n        }\n\n        // 保存设备信息\n        let ret = this.saveDevice(device);\n        // 保存游客信息\n        ret = ret && this.saveGuest(user);\n        // 构建token访问字符串\n        ret = ret && token.buildToken(device, user);\n        // 输出结果\n        this.response(res, ret);\n    }\n\n    // 刷新当前 access_token\n    refreshAccessToken(req, res) {\n        // 获取access_token\n\n        // 如果有效，产生一个新的access_token\n\n    }\n\n    // 用户注册\n    registe(req, res) {\n\n        if (!this.checkCaptcha(req.body.captcha)) {\n            res.json({\n                ok: false,\n                code: 'CAPTCHA_ERROR',\n                msg: '验证码错误'\n            });\n            return;\n        }\n\n        let ts = _.now();\n        // 获取注册数据\n        let data = _.extend({\n            timestamp: ts\n        }, req.body);\n\n        data._id = `${ts}.${ data.mobile || data.email }`;\n        data.password = this.crypto(data.password, data.timestamp);\n        delete data.captcha;\n        delete data.agreement;\n        delete data.confirm;\n\n        // 构建mongo实例\n        let mongo = new Mongo('users');\n        // 向数据库插入数据\n        mongo.insert(data, res);\n    }\n\n\n    // 密码加密算法\n    crypto(pwd, now) {\n        return SHA256(`${pwd}.${pwdSecret}.${now}`).toString();\n    }\n\n    // 检查验证码是否相同\n    checkCaptcha(captcha) {\n        let reg = new RegExp(`^${captcha}$`, \"i\");\n        return false;\n    }\n\n    // 验证输入验证码\n    validCaptcha(req, res) {\n        let c = req.params.captcha;\n\n        let r = {\n            ok: true\n        }\n        if (!this.checkCaptcha(c)) {\n            r = {\n                ok: false\n            }\n        }\n        res.status(200).json(r);\n    }\n\n    // 获取注册验证码\n    getCaptcha(req, res) {\n        let opt = {\n            size: 4,\n            ignoreChars: '0o1i',\n            noise: 3\n        };\n        var captcha = svgCaptcha.create(opt);\n\n        // res.set('Content-Type', 'image/svg+xml');\n        res.status(200).send(captcha.data);\n    }\n\n\n    // 完成用户登录\n    login(req, res) {\n        // 1. 获取用户名、密码\n\n        // 2. 判断用户名，类型（用户名、邮箱、手机）\n\n        // 3. 查询用户数据\n\n        // 4. 比对用户密码\n\n        // 5. 登录成功，返回access_token\n\n        // 构建访问token, \n        let token = this.buildToken(data);\n        // 写出登录成功token\n        res.json({\n            ok: true,\n            access_token: token\n        });\n    }\n\n    // 完成用户登出\n    logout(req, res) {\n        req.logout();\n        res.redirect('/');\n    }\n\n}"]}