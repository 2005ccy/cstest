{"version":3,"sources":["../../src/user/route.js"],"names":["jsonParser","json","urlencodedParser","urlencoded","extended","UserRoute","app","init","user","token","use","setReqUser","post","guestAccessToken","get","refreshAccessToken","login","logout","registe","getCaptcha","validCaptcha","req","res","next","_","includes","path","authenticate","Base"],"mappings":";;;;;;;;AACA;;;;AAGA;;;;AAEA;;;;;;;;;;+eANA;;;AAGA;;AAEA;;;AAGA;AACA,IAAMA,aAAa,qBAAWC,IAAX,EAAnB;AACA;AACA,IAAMC,mBAAmB,qBAAWC,UAAX,CAAsB;AAC3CC,cAAU;AADiC,CAAtB,CAAzB;;IAIqBC,S;;;AAEjB,uBAAYC,GAAZ,EAAiB;AAAA;;AAAA;;AAEb,cAAKA,GAAL,GAAWA,GAAX;AACA,cAAKC,IAAL;AAHa;AAIhB;;;;+BAEM;AACH;AACA,iBAAKC,IAAL,GAAY,oBAAZ;AACA,iBAAKC,KAAL,GAAa,qBAAb;;AAEA;AACA,iBAAKH,GAAL,CAASI,GAAT,CAAa,KAAKC,UAAlB;;AAEA;AACA;AACA,iBAAKL,GAAL,CAASM,IAAT,CAAc,oBAAd,EAAoCZ,UAApC,EAAgD,KAAKQ,IAAL,CAAUK,gBAA1D;AACA;AACA,iBAAKP,GAAL,CAASQ,GAAT,CAAa,wBAAb,EAAuC,KAAKN,IAAL,CAAUO,kBAAjD;AACA;AACA,iBAAKT,GAAL,CAASM,IAAT,CAAc,UAAd,EAA0BV,gBAA1B,EAA4C,KAAKM,IAAL,CAAUQ,KAAtD;AACA;AACA,iBAAKV,GAAL,CAASQ,GAAT,CAAa,WAAb,EAA0B,KAAKN,IAAL,CAAUS,MAApC;AACA;AACA,iBAAKX,GAAL,CAASM,IAAT,CAAc,YAAd,EAA4BV,gBAA5B,EAA8C,KAAKM,IAAL,CAAUU,OAAxD;AACA;AACA,iBAAKZ,GAAL,CAASQ,GAAT,CAAa,YAAb,EAA2B,KAAKN,IAAL,CAAUW,UAArC;AACA;AACA,iBAAKb,GAAL,CAASM,IAAT,CAAc,YAAd,EAA4BV,gBAA5B,EAA8C,KAAKM,IAAL,CAAUY,YAAxD;AACH;;AAED;;;;mCACWC,G,EAAKC,G,EAAKC,I,EAAM;AACvB;AACA,gBAAIC,EAAEC,QAAF,CAAW,CAAC,YAAD,EAAe,YAAf,EAA6B,UAA7B,EAAyC,oBAAzC,EAA+D,gBAA/D,CAAX,EAA6FJ,IAAIK,IAAjG,CAAJ,EAA4G;AACxGH;AACH,aAFD,MAEO;AACH;AACA,qBAAKd,KAAL,CAAWkB,YAAX,CAAwBN,GAAxB,EAA6BC,GAA7B,EAAkCC,IAAlC;AACH;AACJ;;;;EA1CkCK,I;;kBAAlBvB,S","file":"route.js","sourcesContent":["// post 参数解析\nimport bodyParser from 'body-parser';\n\n// 用户实体操作类\nimport User from './user.js';\n// 访问token操作类\nimport Token from './token.js';\n\n// create application/json parser\nconst jsonParser = bodyParser.json();\n// create application/x-www-form-urlencoded parser\nconst urlencodedParser = bodyParser.urlencoded({\n    extended: false\n});\n\nexport default class UserRoute extends Base {\n\n    constructor(app) {\n        super();\n        this.app = app;\n        this.init();\n    }\n\n    init() {\n        // 构建依赖实体\n        this.user = new User();\n        this.token = new Token();\n\n        // 拦截用户非登录请求\n        this.app.use(this.setReqUser);\n\n        // ===== 用户相关操作 =====\n        // 获取用户accessToken\n        this.app.post('/u/accesstoken/new', jsonParser, this.user.guestAccessToken);\n        // 刷新用户accessToken\n        this.app.get('/u/accesstoken/refresh', this.user.refreshAccessToken);\n        // 声明用户登录请求\n        this.app.post('/u/login', urlencodedParser, this.user.login);\n        // 声明用户注销操作\n        this.app.get('/u/logout', this.user.logout);\n        // 用户注册\n        this.app.post('/u/registe', urlencodedParser, this.user.registe);\n        // 获取注册验证码\n        this.app.get('/u/captcha', this.user.getCaptcha);\n        // 验证输入验证码\n        this.app.post('/u/captcha', urlencodedParser, this.user.validCaptcha);\n    }\n\n    // 构建用户信息，设置中间件\n    setReqUser(req, res, next) {\n        // 下列请求无需验证\n        if (_.includes(['/u/captcha', '/u/registe', '/u/login', '/u/accesstoken/new', '/proxy/refresh'], req.path)) {\n            next();\n        } else {\n            // 进行用户验证\n            this.token.authenticate(req, res, next);\n        }\n    }\n\n}"]}