{"version":3,"sources":["../src/server.js"],"names":["app","use","EP","event","props","do","port","listen","console","log"],"mappings":";;AACA;;;;AAEA;;;;AAEA;;;;AAEA;;AAGA;;;;;;AAEA;;AANA;;AAJA;AAWA,IAAMA,MAAM,wBAAZ;AACA;;;AALA;;AALA;AAJA;AAeAA,IAAIC,GAAJ,CAAQ,GAAR,EAAa,4BAAb;;AAGA;AACA,IAAMC,KAAK,8BAAX;;AAEA;AACAA,GAAGC,KAAH,mBAAsBC,KAAtB,CAA4B;AACxBJ,SAAKA;AADmB,CAA5B,EAEGK,EAFH;;AAKA;AACA,IAAMC,OAAO,KAAb;AACA;AACAN,IAAIO,MAAJ,CAAWD,IAAX,EAAiB,YAAW;AACxBE,YAAQC,GAAR,4BAAqCH,IAArC;AACH,CAFD;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"server.js","sourcesContent":["// 导入gzip压缩组件\nimport compression from 'compression';\n// 导入express组件\nimport express from 'express';\n// 事件处理器\nimport EventProcessor from './event/event-processor.js';\n// 导入事件类\nimport './event/event.js';\n\n// 导入路由事件\nimport SystemRoute from './route/system.js';\n\n// 实例化express 对象\nconst app = express();\n// 进行gzip压缩\napp.use('/', compression());\n\n\n// 构建事件处理器\nconst EP = new EventProcessor();\n\n// 触发系统路由事件\nEP.event(SystemRoute).props({\n    app: app\n}).do();\n\n\n// 定义服务端口\nconst port = 18080;\n// 系统监听端口，并启动服务\napp.listen(port, function() {\n    console.log(`url: http://127.0.0.1:${port}/, server start!!`);\n});\n\n\n\n// 加载工具方法\n// import './common/util';\n// 导入配置文件，并设置 global.config\n// import './common/config';\n// 导入日志组件，并设置 global.logger\n// import './common/log4';\n// 全局基类\n// import './common/base.js';\n// 全局加载Mongo\n// import './mongo.js';\n\n// 获取system路由对象\n// import SysRouter from './common/route/system.js';\n// // 引入代理对象\n// import ProxyRouter from './common/route/proxy.js';\n// // 获取user路由对象\n// import UserRouter from './user/route.js';\n// // 引入角色管理对象\n// import roleFunc from './valid.js';\n\n// app程序类\n/*\nclass App extends Base {\n\n    // 构造方法\n    constructor() {\n        super();\n        this.init();\n    }\n\n    // 初始化方法\n    init() {\n        // 获取app对象\n        const app = this.app = express();\n        // 进行gzip压缩\n        app.use('/', compression());\n\n        // 实例化系统路由\n        // new SysRouter(app);\n        // // 用户操作路由\n        // new UserRouter(app);\n        // // 其他被代理的服务\n        // new ProxyRouter(app);\n\n        // // 拦截请求，用户角色与操作验证\n        // roleFunc(app);\n\n        // 启动服务\n        this.start();\n    }\n\n    // 启动服务\n    start() {\n        // 定义服务端口\n        const port = 18080;\n        // 系统监听端口，并启动服务\n        this.app.listen(port, function() {\n            console.log(`url: http://127.0.0.1:${port}/, server start!!`);\n        });\n    }\n}\n// 构建实例，启动服务\nnew App();\n*/\n"]}