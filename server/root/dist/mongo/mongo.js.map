{"version":3,"sources":["../../src/mongo/mongo.js"],"names":["mongoPool","createPool","create","callback","connect","config","mongo","url","destroy","client","close","max","min","idleTimeoutMillis","Mongo","colls","finally","open","acquire","db","collection","col","release","pageNo","pageSize","cursor","count","skip","limit","sort","res","items","toArray","ret","response","query","fields","find","docId","doc","_","isString","findOne","isEmpty","isArray","insertMany","insertOne","item","_id","updateOne","deleteOne","Base","global"],"mappings":"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","file":"mongo.js","sourcesContent":["\n// 导入mongoclient, ObjectID 连接组件\nimport { MongoClient, ObjectID } from 'mongodb';\n// 导入mongo连接池\nimport poolModule from 'generic-pool';\n\n// 构建mongo连接池\nconst mongoPool = poolModule.createPool({\n    create: function(callback) {\n        return MongoClient.connect(config.mongo.url);\n    },\n    destroy: function(client) {\n        return client.close();\n    }\n}, {\n    max: config.mongo.max,\n    min: config.mongo.min,\n    idleTimeoutMillis: config.mongo.idleTimeoutMillis\n});\n\n\n// mongo单个请求类\nexport default class Mongo extends Base {\n\n    // 构造方法\n    constructor(colls) {\n        super();\n        this.colls = colls;\n        this.finally = this.close;\n        this.open();\n    }\n\n    // 打开数据库链接\n    async open() {\n        this.db = await mongoPool.acquire();\n        this.col = this.db && await this.db.collection(this.colls);\n    }\n\n    // 关闭数据库链接\n    async close() {\n        this.db && await mongoPool.release(this.db);\n    }\n\n    // 进行分页查询\n    async pagination(pageNo, pageSize = 10) {\n        if (pageNo) {\n            // 如果为第一页\n            if (pageNo == 1) {\n                // 获取当前条件下，数据条数\n                this.count = await this.cursor.count();\n            }\n            // 计算跳过条数\n            let skip = (pageNo - 1) * pageSize;\n            // 如果跳过数量，大于0\n            if (skip > 0) {\n                // 设置游标跳过\n                this.cursor = await this.cursor.skip(skip);\n            }\n            // 设置返回数量，并返回集合\n            this.cursor = await this.cursor.limit(pageSize);\n        }\n        // 返回对象本身，支持访问链\n        return this;\n    }\n\n    // 对集合进行排序\n    async sort(sort) {\n        // 存在数据库游标\n        if (this.cursor) {\n            // 对游标进行排序\n            this.cursor = this.cursor.sort(sort);\n        }\n        // 返回对象本身，支持访问链\n        return this;\n    }\n\n    // 返回查询数据\n    async toArray(res) {\n        // 查询\n        let items;\n        if (this.cursor) {\n            items = await this.cursor.toArray();\n        }\n        // 构建返回数据\n        let ret = {\n            count: this.count,\n            items: items\n        };\n        // 响应对象输出结果\n        this.response(res, ret);\n        // 返回请求结果\n        return ret;\n    }\n\n    // 根据条件与字段查询集合\n    async find(query = {}, fields) {\n        // 存在数据库链接\n        if (this.col) {\n            // 返回的查询结果\n            this.cursor = await this.col.find(query, fields);\n        }\n        return this;\n    }\n\n    // 查询单条数据\n    async findOne(docId, res) {\n        let doc;\n        // 存在数据库链接\n        if (this.col && _.isString(docId)) {\n            // 返回的查询结果\n            doc = await this.col.findOne({\n                '_id': docId\n            });\n        }\n        // 响应对象输出结果\n        this.response(res, doc);\n        // 返回请求结果\n        return doc;\n    }\n\n    // 向集合添加数据\n    async insert(items, res) {\n        let ret;\n        if (this.col && !_.isEmpty(items)) {\n            // 如果没有查询到数据\n            if (_.isArray(items)) {\n                // 插入多条数据\n                ret = await this.col.insertMany(items);\n            } else {\n                // 插入单条数据\n                ret = await this.col.insertOne(items);\n            }\n        }\n        // 响应对象输出结果\n        this.response(res, ret);\n        // 返回请求结果\n        return ret;\n    }\n\n    // 更新单条数据\n    async update(docId, item, res) {\n        let ret;\n        if (this.col && _.isString(docId) && !_.isEmpty(item)) {\n            // 删除_id 主键\n            delete item._id;\n            // 更新数据结果\n            ret = await this.col.updateOne({\n                '_id': docId\n            }, {\n                '$set': item\n            });\n        }\n        // 响应对象输出结果\n        this.response(res, ret);\n        // 返回请求结果\n        return ret;\n    }\n\n    // 删除集合元素\n    async delete(docId, res) {\n        let ret;\n        if (this.col && _.isString(docId)) {\n            // 更新数据结果\n            ret = await this.col.deleteOne({\n                '_id': docId\n            });\n        }\n        // 响应对象输出结果\n        this.response(res, ret);\n        // 返回请求结果\n        return ret;\n    }\n}\n// 定义全局Mongo对象\nglobal.Mongo = Mongo;"]}